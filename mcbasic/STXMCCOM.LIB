
import_c STXMCCOM_OPEN_FIFO(as long) as long
import_c STXMCCOM_OPEN_CHANGENOTIFY(as long) as long
import_c STXMCCOM_OPEN_FILE_READ(byval as string, as long) as long
import_c STXMCCOM_OPEN_FILE_WRITE(byval as string, as long) as long
import_c STXMCCOM_OPEN_SERVER_WEBSOCKET(byval as long, as long) as long
import_c STXMCCOM_CONNECTED(byval as long, as long) as long
import_c STXMCCOM_CONNECTED_TIMED(byval as long, byval as long, as long) as long
import_c STXMCCOM_RECEIVE(byval as long, as long) as long
import_c STXMCCOM_RECEIVE_TIMED(byval as long, byval as long, as long) as long
import_c STXMCCOM_SEND(byval as long, as long)
import_c STXMCCOM_SEND_SELF(byval as long, as long)
import_c STXMCCOM_CLOSE(byval as long)
import_c STXMCCOM_CLOSE_ALL()
import_c STXMCCOM_NEW(as long)
import_c STXMCCOM_RECEIVE_STRING(byval as string, as long)
import_c STXMCCOM_SEND_STRING(as long) as string
import_c STXMCCOM_GET_LONG(byval as string, as long) as long
import_c STXMCCOM_GET_DOUBLE(byval as string, as long) as double
import_c STXMCCOM_GET_STRING(byval as string, as long) as string
import_c STXMCCOM_PUT_LONG(byval as string, byval as long, as long)
import_c STXMCCOM_PUT_DOUBLE(byval as string, byval as double, as long)
import_c STXMCCOM_PUT_STRING(byval as string, byval as string, as long)


dim shared waitLoopTimeoutMs as const long		= 1000



public function com_open_fifo as long
  dim err as long
  com_open_fifo = STXMCCOM_OPEN_FIFO(err)
  if err then
    print "ERROR: STXMCCOM_OPEN_FIFO"
  end if
end function


public function com_open_changenotify as long
  dim err as long
  com_open_changenotify = STXMCCOM_OPEN_CHANGENOTIFY(err)
  if err then
    print "ERROR: STXMCCOM_OPEN_CHANGENOTIFY"
  end if
end function


public function com_open_file_read(byval fname as string) as long
  dim err as long
  com_open_file_read = STXMCCOM_OPEN_FILE_READ(fname, err)
  if err then
    print "ERROR: STXMCCOM_OPEN_FILE_READ"
  end if
end function


public function com_open_file_write(byval fname as string) as long
  dim err as long
  com_open_file_write = STXMCCOM_OPEN_FILE_WRITE(fname, err)
  if err then
    print "ERROR: STXMCCOM_OPEN_FILE_WRITE"
  end if
end function


public function com_open_server_websocket(byval port as long) as long
  dim err as long
  com_open_server_websocket = STXMCCOM_OPEN_SERVER_WEBSOCKET(port, err)
  if err then
    print "ERROR: STXMCCOM_OPEN_SERVER_WEBSOCKET"
  end if
end function


public function com_connected(byval channelId as long) as long
  dim err as long
  com_connected = STXMCCOM_CONNECTED(channelId, err)
  if err then
    print "ERROR: STXMCCOM_CONNECTED"
  end if
end function


public function com_connected_wait_timed(byval channelId as long, byval tout as long) as long
  dim err as long
  com_connected_wait_timed = STXMCCOM_CONNECTED_TIMED(channelId, tout, err)
  if err then
    print "ERROR: STXMCCOM_CONNECTED_TIMED"
  end if
end function


public sub com_connected_wait(byval channelId as long)
  while not com_connected_wait_timed(channelId, waitLoopTimeoutMs)
  end while
end sub


public function com_receive(byval channelId as long) as long
  dim err as long
  com_receive = STXMCCOM_RECEIVE(channelId, err)
  if err then
    print "ERROR: STXMCCOM_RECEIVE"
  end if
end function


public function com_receive_wait_timed(byval channelId as long, byval tout as long) as long
  dim err as long
  com_receive_wait_timed = STXMCCOM_RECEIVE_TIMED(channelId, tout, err)
  if err then
    print "ERROR: STXMCCOM_RECEIVE_TIMED"
  end if
end function


public sub com_receive_wait(byval channelId as long)
  while not com_receive_wait_timed(channelId, waitLoopTimeoutMs)
  end while
end sub


public sub com_send(byval channelId as long)
  dim err as long
  STXMCCOM_SEND(channelId, err)
  if err then
    print "ERROR: STXMCCOM_SEND"
  end if
end sub


public sub com_send_self(byval channelId as long)
  dim err as long
  STXMCCOM_SEND_SELF(channelId, err)
  if err then
    print "ERROR: STXMCCOM_SEND_SELF"
  end if
end sub


public sub com_close(byval channelId as long)
  STXMCCOM_CLOSE(channelId)
end sub


public sub com_close_all
  STXMCCOM_CLOSE_ALL()
end sub


public sub com_new
  dim err as long
  STXMCCOM_NEW(err)
  if err then
    print "ERROR: STXMCCOM_NEW"
  end if
end sub


public sub com_receive_string(byval str as string)
  dim err as long
  STXMCCOM_RECEIVE_STRING(str, err)
  if err then
    print "ERROR: STXMCCOM_RECEIVE_STRING"
  end if
end sub


public function com_send_string as string
  dim err as long
  com_send_string = STXMCCOM_SEND_STRING(err)
  if err then
    print "ERROR: STXMCCOM_SEND_STRING"
  end if
end function


public function com_get_long(byval path as string) as long
  dim err as long
  com_get_long = STXMCCOM_GET_LONG(path, err)
  if err then
    print "ERROR: STXMCCOM_GET_LONG"
  end if
end function


public function com_get_double(byval path as string) as double
  dim err as long
  com_get_double = STXMCCOM_GET_DOUBLE(path, err)
  if err then
    print "ERROR: STXMCCOM_GET_DOUBLE"
  end if
end function


public function com_get_string(byval path as string) as string
  dim err as long
  com_get_string = STXMCCOM_GET_STRING(path, err)
  if err then
    print "ERROR: STXMCCOM_GET_STRING"
  end if
end function


public sub com_put_long(byval path as string, byval longValue as long)
  dim err as long
  STXMCCOM_PUT_LONG(path, longValue, err)
  if err then
    print "ERROR: STXMCCOM_PUT_LONG"
  end if
end sub


public sub com_put_double(byval path as string, byval doubleValue as double)
  dim err as long
  STXMCCOM_PUT_DOUBLE(path, doubleValue, err)
  if err then
    print "ERROR: STXMCCOM_PUT_DOUBLE"
  end if
end sub


public sub com_put_string(byval path as string, byval stringValue as string)
  dim err as long
  STXMCCOM_PUT_STRING(path, stringValue, err)
  if err then
    print "ERROR: STXMCCOM_PUT_STRING"
  end if
end sub
