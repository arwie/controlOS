common shared com_error as error "general com error"	  20800

common shared com_channelLog				as const long		= 1
common shared com_channelShell				as const long		= 2
common shared com_channelState				as const long		= 3
common shared com_channelFifo				as const long		= 4
common shared com_channelChangenotify		as const long		= 5
common shared com_channelFileRead			as const long		= 6
common shared com_channelFileWrite			as const long		= 7
common shared com_channelServerWebsocket	as const long		= 8
common shared com_channelClientCncHaas		as const long		= 9


dim shared waitLoopTimeoutMs as const long				= 100



import_c STXMCCOM_OPEN(byval as long, as long) as long
import_c STXMCCOM_CONNECTED(byval as long, as long) as long
import_c STXMCCOM_CONNECTED_TIMED(byval as long, byval as long, as long) as long
import_c STXMCCOM_RECEIVE(byval as long, as long) as long
import_c STXMCCOM_RECEIVE_TIMED(byval as long, byval as long, as long) as long
import_c STXMCCOM_SEND(byval as long, as long)
import_c STXMCCOM_SEND_SELF(byval as long, as long)
import_c STXMCCOM_RESET(byval as long)
import_c STXMCCOM_CLOSE(byval as long)
import_c STXMCCOM_CLOSE_ALL()
import_c STXMCCOM_CLEAR(as long)
import_c STXMCCOM_EMPTY(as long) as long
import_c STXMCCOM_STORE(byval as long, as long)
import_c STXMCCOM_RESTORE(as long)
import_c STXMCCOM_DELETE(as string)
import_c STXMCCOM_WITH(as string)
import_c STXMCCOM_EXTRACT(as string, as long)
import_c STXMCCOM_RECEIVE_STRING(as string, as long)
import_c STXMCCOM_SEND_STRING(as long) as string
import_c STXMCCOM_GET_LONG(as string, as long) as long
import_c STXMCCOM_GET_DOUBLE(as string, as long) as double
import_c STXMCCOM_GET_STRING(as string, as long) as string
import_c STXMCCOM_PUT_LONG(as string, byval as long, as long)
import_c STXMCCOM_PUT_DOUBLE(as string, byval as double, as long)
import_c STXMCCOM_PUT_STRING(as string, as string, as long)



public function com_open(byval channleType as long) as long
  dim err as long
  com_open = STXMCCOM_OPEN(channleType, err)
  if err then
    throw com_error
  end if
end function


public function com_connected(byval channelId as long) as long
  dim err as long
  com_connected = STXMCCOM_CONNECTED(channelId, err)
  if err then
    throw com_error
  end if
end function


public function com_connectedWaitTimed(byval channelId as long, byval tout as long) as long
  dim err as long
  com_connectedWaitTimed = STXMCCOM_CONNECTED_TIMED(channelId, tout, err)
  if err then
    throw com_error
  end if
end function


public function com_connectedWait(byval channelId as long, waitWhile as long) as long
  com_connectedWait = false
  while not com_connectedWait and waitWhile
    com_connectedWait = com_connectedWaitTimed(channelId, waitLoopTimeoutMs)
  end while
end function


public function com_receive(byval channelId as long) as long
  dim err as long
  com_receive = STXMCCOM_RECEIVE(channelId, err)
  if err then
    throw com_error
  end if
end function


public function com_receiveWaitTimed(byval channelId as long, byval tout as long) as long
  dim err as long
  com_receiveWaitTimed = STXMCCOM_RECEIVE_TIMED(channelId, tout, err)
  if err then
    throw com_error
  end if
end function


public function com_receiveWait(byval channelId as long, waitWhile as long) as long
  com_receiveWait = false
  while not com_receiveWait and waitWhile
    com_receiveWait = com_receiveWaitTimed(channelId, waitLoopTimeoutMs)
  end while
end function


public sub com_send(byval channelId as long)
  dim err as long
  STXMCCOM_SEND(channelId, err)
  if err then
    throw com_error
  end if
end sub


public sub com_sendSelf(byval channelId as long)
  dim err as long
  STXMCCOM_SEND_SELF(channelId, err)
  if err then
    throw com_error
  end if
end sub


public sub com_reset(byval channelId as long)
  STXMCCOM_RESET(channelId)
end sub


public sub com_close(byval channelId as long)
  STXMCCOM_CLOSE(channelId)
end sub


public sub com_closeAll
  STXMCCOM_CLOSE_ALL()
end sub


public sub com_clear
  dim err as long
  STXMCCOM_CLEAR(err)
  if err then
    throw com_error
  end if
end sub


public function com_empty as long
  dim err as long
  com_empty = STXMCCOM_EMPTY(err)
  if err then
    throw com_error
  end if
end function


public sub com_store
  dim err as long
  STXMCCOM_STORE(false, err)
  if err then
    throw com_error
  end if
end sub


public sub com_storeCopy
  dim err as long
  STXMCCOM_STORE(true, err)
  if err then
    throw com_error
  end if
end sub


public sub com_restore
  dim err as long
  STXMCCOM_RESTORE(err)
  if err then
    throw com_error
  end if
end sub


public sub com_delete(byval path as string)
  STXMCCOM_DELETE(path)
end sub


public sub com_with(byval path as string)
  STXMCCOM_WITH(path)
end sub


public sub com_extract(byval path as string)
  dim err as long
  STXMCCOM_EXTRACT(path, err)
  if err then
    throw com_error
  end if
end sub


public sub com_receiveString(byval str as string)
  dim err as long
  STXMCCOM_RECEIVE_STRING(str, err)
  if err then
    throw com_error
  end if
end sub


public function com_sendString as string
  dim err as long
  com_sendString = STXMCCOM_SEND_STRING(err)
  if err then
    throw com_error
  end if
end function


public function com_getLong(byval path as string) as long
  dim err as long
  com_getLong = STXMCCOM_GET_LONG(path, err)
  if err then
    throw com_error
  end if
end function


public function com_getDouble(byval path as string) as double
  dim err as long
  com_getDouble = STXMCCOM_GET_DOUBLE(path, err)
  if err then
    throw com_error
  end if
end function


public function com_getString(byval path as string) as string
  dim err as long
  com_getString = STXMCCOM_GET_STRING(path, err)
  if err then
    throw com_error
  end if
end function


public function com_getLocationXy(byval path as string) as location of xy
  com_getLocationXy = #{com_getDouble(path+".x"), com_getDouble(path+".y")} 
end function


public function com_getLocationXyzr(byval path as string) as location of xyzr
  com_getLocationXyzr = #{com_getDouble(path+".x"), com_getDouble(path+".y"), com_getDouble(path+".z"), com_getDouble(path+".r")} 
end function


public function com_getJointXyzr(byval path as string) as joint of xyzr
  com_getJointXyzr = {com_getDouble(path+".1"), com_getDouble(path+".2"), com_getDouble(path+".3"), com_getDouble(path+".4")} 
end function


public sub com_putLong(byval path as string, byval longValue as long)
  dim err as long
  STXMCCOM_PUT_LONG(path, longValue, err)
  if err then
    throw com_error
  end if
end sub


public sub com_putDouble(byval path as string, byval doubleValue as double)
  dim err as long
  STXMCCOM_PUT_DOUBLE(path, doubleValue, err)
  if err then
    throw com_error
  end if
end sub


public sub com_putString(byval path as string, byval stringValue as string)
  dim err as long
  STXMCCOM_PUT_STRING(path, stringValue, err)
  if err then
    throw com_error
  end if
end sub


public sub com_putLocationXy(byval path as string, byval pos as location of xy)
  call com_putDouble(path+".x", pos{1})
  call com_putDouble(path+".y", pos{2})
end sub


public sub com_putLocationXyzr(byval path as string, byval pos as location of xyzr)
  call com_putDouble(path+".x", pos{1})
  call com_putDouble(path+".y", pos{2})
  call com_putDouble(path+".z", pos{3})
  call com_putDouble(path+".r", pos{4})
end sub


public sub com_putJointXyzr(byval path as string, byval jnt as joint of xyzr)
  call com_putDouble(path+".1", jnt{1})
  call com_putDouble(path+".2", jnt{2})
  call com_putDouble(path+".3", jnt{3})
  call com_putDouble(path+".4", jnt{4})
end sub
