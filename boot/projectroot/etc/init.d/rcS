#!/bin/sh

# Copyright (c) 2016 Artur Wiebe <artur@4wiebe.de>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
# associated documentation files (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


waitfs()
{
while ! findfs LABEL=$1 > /dev/null; do
	echo "waiting for $1 device ..."
	sleep 0.1; 
done
}


disk_install()
{
. /etc/install.conf

waitfs INSTALL
echo "installing system to $DISKDEV"

mount -r /mnt/install

xzcat /mnt/install/system.img.xz | dd of=$DISKDEV bs=32K

sync
sleep 3
blockdev --rereadpt $DISKDEV
sleep 2
}


data_format()
{
echo "appending data partition (using rest of sd-card)"
sfdisk -a $DISKDEV << +++++
-,+,-,-
+++++

sync
sleep 3
blockdev --rereadpt $DISKDEV
sleep 2
}


data_init()
{
echo "running data init"

echo "(re)creating data fs ..."
mkfs.ext4 -Fq -L "DATA" $DATADEV
mount /mnt/data

echo "initializing data fs ..."
tar -C /mnt/data -x -f /mnt/init/data

sync
fstrim -v /mnt/data

umount /mnt/data
rm -f /mnt/init/data
sync

echo "finished data init"
}


init_mount() 
{
echo "check and mount init partition"

fsck.fat -pv $INITDEV
mount /mnt/init

# delete all stubs created by fsck
find /mnt/init -iname "*.REC" -delete
}


root_update() 
{
echo "running update"

echo "testing update file integrity"
if ! tar -x -O -f /mnt/init/update &> /dev/null
then
	echo "update file is corrupt -> deleting"
	rm -f /mnt/init/update
	return 1
fi

echo "(re)creating root fs ..."
mkfs.ext4 -Fq -L "ROOT" $ROOTDEV
mount /mnt/root

echo "updating root fs ..."
tar -C /mnt/root -x -f /mnt/init/update

sync
fstrim -v /mnt/root

umount /mnt/root
rm -f /mnt/init/update
sync

echo "finished update"
}


root_boot() 
{
echo "starting root system"

mount -r /mnt/root

. /mnt/root/boot/boot.conf
kexec --load /mnt/root/boot/$IMAGE --command-line="$BOOTARGS"
kexec --exec
}


recovery()
{
echo "starting recovery system"

sleep 3
mount -a

run-parts -a start /etc/rc.d

exit
}



case $(cat /proc/cmdline) in
	*install*)	disk_install;;
	*debug*)	recovery;;
esac



waitfs BOOT

BOOTDEV=$(findfs LABEL=BOOT)
case $BOOTDEV in
	*mmcblk*)
		DISKDEV=${BOOTDEV%??}
		INITDEV=${DISKDEV}p2
		ROOTDEV=${DISKDEV}p3
		DATADEV=${DISKDEV}p4
		;;
	*)
		DISKDEV=${BOOTDEV%?}
		INITDEV=${DISKDEV}2
		ROOTDEV=${DISKDEV}3
		DATADEV=${DISKDEV}4
		;;
esac
echo "using: DISKDEV=$DISKDEV INITDEV=$INITDEV ROOTDEV=$ROOTDEV DATADEV=$DATADEV"



if [ ! -b $DATADEV ]; then
	data_format
fi


init_mount

if [ -f /mnt/init/data ]; then
	data_init
else
	fsck.ext4 -pv $DATADEV
fi

if [ -f /mnt/init/update ]; then
	root_update
fi

if [ -f /mnt/init/debug ]; then
	recovery
fi

umount /mnt/init


root_boot
