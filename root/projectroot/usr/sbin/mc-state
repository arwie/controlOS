#!/usr/bin/python3

import argparse, json, datetime, subprocess, logging
from systemd import journal
from tornado import ioloop, gen, websocket


logging.root.addHandler(journal.JournalHandler())
logging.root.setLevel(logging.INFO)

parser = argparse.ArgumentParser()
parser.add_argument("host")
parser.add_argument("port")
args = parser.parse_args()



def process(msg):
	for k, v in msg.items():
		subprocess.run(['/bin/systemctl', '--no-block', 'start' if int(v) else 'stop', 'mc-state@{}.target'.format(k)])


@gen.coroutine
def receive():
	state = yield websocket.websocket_connect('ws://{}:{}'.format(args.host, args.port))
	logging.info('connected')

	while True:
		msgJson = yield gen.with_timeout(datetime.timedelta(seconds=3), state.read_message())
		if msgJson is None:
			break
		msg = json.loads(msgJson)
		if not msg:
			continue
		process(msg)



try:
	ioloop.IOLoop.current().run_sync(receive)
except Exception as e:
	logging.error(e)
