' Copyright (c) 2016 Artur Wiebe <artur@4wiebe.de>
'
' Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
' associated documentation files (the "Software"), to deal in the Software without restriction,
' including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
' and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
' subject to the following conditions:
'
' The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
'
' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
' INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
' IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
' WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
' OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


dim shared pollIntervalMs as const long		= 250

dim shared debugWebsocketConnected as long



<?lib_start()?>
<?	libComOpenServerWebsocket('debug_websocket', 5610, ['bool("/receive", false)'])?>
	debugWebsocketConnected = false
end sub


<?lib_stop()?>
	call com_close(debug_websocket)
end sub



<?lib_prgLoop(16)?>
	dim json_ as string
	select case com_receive(debug_websocket, pollIntervalMs)
	case com_receiveConnect
		debugWebsocketConnected = true
	case com_receiveDisconnect
		debugWebsocketConnected = false
	case com_receiveTimeout
	case else
		call com_clear
		call pollData
		json_ = com_getJson("")
		call logLibNotice("system state snapshot")
		call com_putJson("/debug", json_)
		call logSend
	end select

	if debugWebsocketConnected then
		call com_clear
		call pollData
		call com_send(debug_websocket)
	end if
end sub


<?lib_prgError()?>
end sub



sub pollData
<?
	foreach(get('simio') as $io) {
		ll('call com_put'.ucfirst($io['type']).'("/'.explode('_', $io['name'])[0].'/'.explode('_', $io['name'])[1].' ('.$io['dir'].')", '.($io['dir']=='out'?$io['app']:$io['name']).')');
	}

	foreach(get('robot') as $rbt) {
		ll('call com_putBool("/'.$rbt['name'].'/enable", '.$rbt['name'].'.enable)');
		ll('call com_putJoint'.ucfirst($rbt['type']).'("/'.$rbt['name'].'/positionFeedback", '.$rbt['name'].'.positionFeedback)');
	}

	foreach(get('axis') as $ax) {
		ll('call com_putBool("/'.$ax['name'].'/enable", '.$ax['name'].'.enable)');
		ll('call com_putDouble("/'.$ax['name'].'/positionFeedback", '.$ax['name'].'.positionFeedback)');
		ll('call com_putDouble("/'.$ax['name'].'/torqueFeedback", '.$ax['name'].'.torqueFeedback)');
	}

	foreach (get('libs')['app'] as $l) {
		ll('call com_with("/'.$l['name'].'")');
		ll('call com_putBool("started", '.$l['name'].'_started)');
		ll('call com_putBool("active", '.$l['name'].'_active)');
		if ($l['debug'])
			ll('call '.$l['name'].'_debug');
	}
?> 
end sub
