' Copyright (c) 2016 Artur Wiebe <artur@4wiebe.de>
'
' Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
' associated documentation files (the "Software"), to deal in the Software without restriction,
' including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
' and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
' subject to the following conditions:
'
' The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
'
' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
' INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
' IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
' WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
' OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


common shared log_prioCritical	as const long	= 2
common shared log_prioError		as const long	= 3
common shared log_prioWarning	as const long	= 4
common shared log_prioNotice	as const long	= 5
common shared log_prioInfo		as const long	= 6
common shared log_prioDebug		as const long	= 7

common shared log_priority		as const long	= <?=$sim ? 'log_prioDebug' : 'log_prioInfo'?> 
common shared log_priorityPrint	as const long	= <?=$sim ? 'log_prioDebug' : 'log_prioWarning'?> 


dim shared comLogChannel as long
dim shared comLogServer  as long



public sub log_message(byval prio_ as long, byval message_ as string)
	call log_messageRef(prio_, message_)
end sub

public sub log_messageRef(byval prio_ as long, message_ as string)
	call com_clear
	call com_putLong("/priority", prio_)
	call com_putStringRef("/message", message_)
end sub


public sub log_putMessageId(byval messageId_ as string)
	call com_putStringRef("/message_id", messageId_)
end sub

public sub log_putCodeFunc(byval codeFunc_ as string)
	call com_putStringRef("/code_func", codeFunc_)
end sub

public sub log_putReport(byval report_ as string)
	call com_putStringRef("/report", report_)
	call com_putLong("/reports", true)
end sub


public sub log_send
	try
		call com_send(comLogChannel)
	catch else
		print "ERROR: log failed to send"
	end try
end sub



<?lib_init()?>
<?	libComOpen('comLogChannel', 'log', ['long("/priority", log_priority)'])?> 
end sub


<?lib_start()?>
<?	libComOpenServerWebsocket('comLogServer', 5600, ['bool("/receive", false)'])?>
end sub


public sub log_waitDrain
	call com_clear
	call com_sendSelf(comLogChannel)
	call log_waitWhile(log_active)
end sub



<?lib_prgStart()?>
	call dropLong(com_receive(comLogServer, 60000))	'wait for log client connection
end sub


<?lib_prgLoop(16)?>
	select case com_receive(comLogChannel, 250)
	case com_receiveMessage
		call com_send(comLogServer)
		call printLog
	case com_receiveNotify
		call log_stopTrigger
	end select
end sub


<?lib_prgError()?>
end sub



sub printLog
	dim prio as long
	try
		prio = com_getLong("/priority")
		if prio <= log_priorityPrint then
			select case prio
			case log_prioCritical
				print "CRITICAL: ";
			case log_prioError
				print "ERROR:    ";
			case log_prioWarning
				print "WaRnInG:  ";
			case log_prioNotice
				print " Notice:  ";
			case log_prioInfo
				print "  info:   ";
			case log_prioDebug
				print "   debug: ";
			end select
			print com_getString("/message")
		end if
	catch else
	end try
end sub
