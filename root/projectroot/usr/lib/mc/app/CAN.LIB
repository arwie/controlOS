
common shared can_busnumber as const long = 1



<?lib_prg()?>
	bus[can_busnumber].cycletime = 4000
	
	bus[can_busnumber].phase = 0
	sleep 300

<?
	foreach($can as $dev) {
		switch ($dev['device']) {
			case 'stepim':
				ll('call can_sdoWrite('.$dev['address'].', 0x6040, 0, 16, 128)');
				ll('call can_sdoWrite('.$dev['address'].', 0x262C, 0, 32, 14400)');
				ll('call can_sdoWrite('.$dev['address'].', 0x1017, 0, 16, 0)');
				ll('call can_sdoWrite('.$dev['address'].', 0x1006, 0, 32, bus[can_busnumber].cycletime)');
				ll('call can_sdoWrite('.$dev['address'].', 0x60C2, 1, 8,  bus[can_busnumber].cycletime/1000)');
				ll('call can_sdoWrite('.$dev['address'].', 0x60C2, 2, 8,  -3)');
				ll('call can_sdoWrite('.$dev['address'].', 0x6060, 0, 8, 8)');
				ll('call IntergratedStepperMapPDO('.$dev['address'].')');
				break;
		}
	}
?>

	bus[can_busnumber].phase = 4
	sleep 100
end sub



public sub can_write(byval slave_ as long, byval index_ as long, byval subindex_ as long, byval size_ as long, byval value_ as long)
	dim pdo_ as pdo_type
	select case index_
	case 0x60FE
		pdo_->data[1]   = value_
		pdo_->length[1] = 4
		call can_pdo2_write(slave_, pdo_)
	case else
		call can_sdoWrite(slave_, index_, subindex_, size_, value_)
	end select
end sub

public function can_read(byval slave_ as long, byval index_ as long, byval subindex_ as long) as long
	dim refCnt_ as long
	select case index_
	case 0x6041
		can_read = CAN_PDO_Read_atomic(slave_, 1, 0, 2, refCnt_)
	case 0x60FD
		can_read = CAN_PDO_Read_atomic(slave_, 2, 0, 4, refCnt_)
	case else
		can_read = can_sdoRead(slave_, index_, subindex_)
	end select
end function



<?$can_xdoReadWriteBody = function($cmd, $valueType=false) {
	ll('try');
	lll($cmd);
	ll('catch else');
	lll('call logLibError(scope+": "+error)');
	lll('call com_putLong("error", errornumber)');
	lll('call log_putCodeFunc(scope)');
	lll('call com_putLong("slave", slave_)');
	lll('call com_putString("index", hex$(index_)+"h")');
	lll('call com_putLong("subindex", subindex_)');
	if ($valueType) lll('call com_put'.ucfirst($valueType).'("value", value_)');
	lll('call logSend');
	ll('finally');
	lll('throw');
	ll('end try');
}?>


public sub can_sdoWrite(byval slave_ as long, byval index_ as long, byval subindex_ as long, byval size_ as long, byval value_ as long)
<?	$can_xdoReadWriteBody('call CAN_SDO_WRITE(slave_, index_, subindex_, size_, value_)', 'long')?>
end sub


public function can_sdoRead(byval slave_ as long, byval index_ as long, byval subindex_ as long) as long
<?	$can_xdoReadWriteBody('can_sdoRead = CAN_SDO_READ(slave_, index_, subindex_)')?>
end function
