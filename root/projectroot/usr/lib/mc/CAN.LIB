' Copyright (c) 2016 Artur Wiebe <artur@4wiebe.de>
'
' Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
' associated documentation files (the "Software"), to deal in the Software without restriction,
' including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
' and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
' subject to the following conditions:
'
' The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
'
' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
' INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
' IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
' WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
' OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


common shared can_busnumber as const long = 1
common shared can_cycletime as const long = 4000	'{4000,2000,1000}[µs]



<?lib_init()?>
	bus[can_busnumber].phase = 0
	call sleepActive(300)

<?
	foreach(get('can') as $dev) {
		switch ($dev['device']) {
			case 'stepim':
				ll('call can_sdoWrite('.$dev['address'].', 0x6040, 0, 16, 128)');
				ll('call can_sdoWrite('.$dev['address'].', 0x262C, 0, 32, 50000)');									#262Ch – Sync Allowed Window (500µs)
				ll('call can_sdoWrite('.$dev['address'].', 0x1017, 0, 16, 0)');
				ll('call can_sdoWrite('.$dev['address'].', 0x1006, 0, 32, can_cycletime)');
				ll('call can_sdoWrite('.$dev['address'].', 0x60C2, 1, 8,  can_cycletime/1000)');
				ll('call can_sdoWrite('.$dev['address'].', 0x60C2, 2, 8,  -3)');
				ll('call can_sdoWrite('.$dev['address'].', 0x6060, 0, 8, 8)');
				ll('call IntergratedStepperMapPDO('.$dev['address'].')');
				break;
		}
	}
?>
end sub


<?lib_start()?>
	bus[can_busnumber].cycletime = can_cycletime
	bus[can_busnumber].phase = 4
	call sleepActive(100)
end sub



public sub can_write(byval slave_ as long, byval index_ as long, byval subindex_ as long, byval size_ as long, byval value_ as long)
	dim pdo_ as pdo_type
	select case index_
	case 0x60FE
		pdo_->data[1]   = value_
		pdo_->length[1] = 4
		call can_pdo2_write(slave_, pdo_)
	case else
		call can_sdoWrite(slave_, index_, subindex_, size_, value_)
	end select
end sub

public function can_read(byval slave_ as long, byval index_ as long, byval subindex_ as long) as long
	dim refCnt_ as long
	select case index_
	case 0x6041
		can_read = CAN_PDO_Read_atomic(slave_, 1, 0, 2, refCnt_)
	case 0x60FD
		can_read = CAN_PDO_Read_atomic(slave_, 2, 0, 4, refCnt_)
	case else
		can_read = can_sdoRead(slave_, index_, subindex_)
	end select
end function



<?$can_xdoReadWriteBody = function($cmd, $valueType=false) {
	ll('try');
	lll($cmd);
	ll('catch else');
	lll('call logLibError(scope+": "+error)');
	lll('call com_putLong("/error", errornumber)');
	lll('call log_putCodeFunc(scope)');
	lll('call com_putLong("/slave", slave_)');
	lll('call com_putString("/index", hex$(index_)+"h")');
	lll('call com_putLong("/subindex", subindex_)');
	if ($valueType) lll('call com_put'.ucfirst($valueType).'("/value", value_)');
	lll('call logSend');
	ll('finally');
	lll('throw');
	ll('end try');
}?>


public sub can_sdoWrite(byval slave_ as long, byval index_ as long, byval subindex_ as long, byval size_ as long, byval value_ as long)
<?	$can_xdoReadWriteBody('call CAN_SDO_WRITE(slave_, index_, subindex_, size_, value_)', 'long')?>
end sub


public function can_sdoRead(byval slave_ as long, byval index_ as long, byval subindex_ as long) as long
<?	$can_xdoReadWriteBody('can_sdoRead = CAN_SDO_READ(slave_, index_, subindex_)')?>
end function


public function can_readString(byval slave_ as long, byval index_ as long, byval subindex_ as long) as string
end function
